services:

  backend:
    build:
      context: ./gagunokuga_back  
      dockerfile: Dockerfile  
    image: g1767g/gagu-backend:1.0.0
    container_name: backend
    restart: always  
    ports:
      - "8080:8080"  
    depends_on:
      mysql:
        condition: service_healthy  # MySQL이 정상적으로 실행된 후 backend 실행
      redis:
        condition: service_healthy  # Redis가 정상적으로 실행된 후 backend 실행
    env_file:
      - .env  
    networks:
      - app-network 
    healthcheck:
      test: ["CMD", "sh", "-c", "curl -f http://backend:8080/api/health || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 5

  frontend:
    build:
      context: ./gagunokuga_front  
      dockerfile: Dockerfile
    image: g1767g/gagu-frontend:1.0.0
    container_name: frontend  
    restart: always  
    env_file:
      - .env  
    depends_on:
      backend:
        condition: service_healthy 
    networks:
      - app-network  

  mysql:
    image: mysql:8 
    container_name: mysql  
    restart: always  
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD} 
      MYSQL_DATABASE: ${MYSQL_DATABASE} 
      MYSQL_USER: ${MYSQL_USER} 
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}  
    env_file:
      - .env  
    ports:
      - "3306:3306"  
    networks:
      - app-network  
    volumes:
      - mysql_data:/var/lib/mysql  
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "mysql"]  
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:latest  
    container_name: redis  
    restart: always  
    env_file:
      - .env  
    ports:
      - "6379:6379" 
    networks:
      - app-network  
    volumes:
      - redis_data:/data 
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]  
      interval: 5s
      timeout: 5s
      retries: 5

  nginx:
    image: nginx:latest  
    container_name: nginx  
    restart: always 
    ports:
      - "80:80"  
    volumes:  
      - ./nginx.conf:/etc/nginx/nginx.conf:ro  
    depends_on:
      backend:
        condition: service_healthy  
    networks:
      - app-network  
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 10s
      timeout: 10s
      retries: 3

# 컨테이너 간 통신을 위한 네트워크 설정
networks:
  app-network:
    driver: bridge  

# 데이터 볼륨 설정
volumes:
  mysql_data: 
  redis_data:  
