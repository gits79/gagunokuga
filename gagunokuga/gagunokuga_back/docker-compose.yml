

services:
  # MySQL 컨테이너
  mysql:
    image: mysql:8.0
    container_name: mysql-container
    restart: always
    env_file:
      - .env
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USERNAME}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - mynetwork

  # Redis 컨테이너
  redis:
    image: redis:latest
    container_name: redis-container
    restart: always
    env_file:
      - .env
    environment:
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
    ports:
      - "6379:6379"
    networks:
      - mynetwork

  # Spring Boot 컨테이너
  app:
    # build는 로컬에서 Dockerfile로 이미지를 빌드 하는 경우
#    build: .
    # DockerHub에서 이미지 땡겨올 경우
    image: g1767g/gagu_back:latest
    container_name: springboot-container
    restart: always
    depends_on:
      - mysql
      - redis
    env_file:
      - .env
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://${MYSQL_HOST}:${MYSQL_PORT}/${MYSQL_DATABASE}?serverTimezone=UTC
      SPRING_DATASOURCE_USERNAME: ${MYSQL_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${MYSQL_PASSWORD}
      SPRING_REDIS_HOST: ${REDIS_HOST}
      SPRING_REDIS_PORT: ${REDIS_PORT}
    ports:
      - "8080:8080"
    networks:
      - mynetwork

# 네트워크 설정
networks:
  mynetwork:

# 데이터 저장 볼륨 설정
volumes:
  mysql_data:
